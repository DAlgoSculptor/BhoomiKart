// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  phone         String?   @unique
  password      String?
  image         String?
  role          UserRole  @default(BUYER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  properties    Property[]
  savedProperties Property[] @relation("SavedProperties")
  sentMessages   Message[]   @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  reviews       Review[]
}

model Property {
  id          String    @id @default(cuid())
  title       String
  description String
  price       Float
  location    String
  type        PropertyType
  status      PropertyStatus @default(AVAILABLE)
  bedrooms    Int
  bathrooms   Int
  area        Float
  images      String[]
  features    String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  savedBy     User[]    @relation("SavedProperties")
  messages    Message[]
  reviews     Review[]
}

model Message {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  senderId    String
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  String
  receiver    User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id])
}

model Review {
  id          String    @id @default(cuid())
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id])
}

enum UserRole {
  BUYER
  SELLER
  AGENT
  ADMIN
}

enum PropertyType {
  APARTMENT
  HOUSE
  VILLA
  PLOT
  COMMERCIAL
}

enum PropertyStatus {
  AVAILABLE
  SOLD
  RENTED
  PENDING
} 